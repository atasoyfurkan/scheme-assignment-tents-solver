#lang scheme
; 2017400216 

;You can replace #f's with your function definitions and define more helper functions as you need to use this template.

; Solver function
(define TENTS-SOLUTION (lambda (lst)
                         (define count-row (car lst))
                         (define count-col (cadr lst))
                         (define trees (caddr lst))
                         (define b1 (CREATE-BOARD (+ (length count-row) 2) (+ (length count-col) 2) #t) )
                         (define b2 (CHANGE-BOARD-NTIMES b1 trees 2 0))
                         (define b3 (ZERO-DETECTER b2 count-row count-col))
                         (define b4 (ORTHOGONAL-DETECTER b3 b3 0))
                         (define final-board (EXECUTE b4 count-row count-col #t))
                         (define solution (GIVE-SOLUTION final-board '() 0))
                         (if (equal? solution '())
                             #f
                             solution
                         )
                       ))


(define GIVE-SOLUTION (lambda (board tents row)
                        (if (null? board)
                            tents
                            (GIVE-SOLUTION (cdr board) (GIVE-SOLUTION-INNER (car board) tents row 0) (+ row 1))
                        ) 
                      ))
(define GIVE-SOLUTION-INNER (lambda (lst tents row col)
                              (if (null? lst)
                                  tents
                                  (if (= (car lst) 3)
                                      (GIVE-SOLUTION-INNER (cdr lst) (cons (list row col) tents) row (+ col 1))
                                      (GIVE-SOLUTION-INNER (cdr lst) tents row (+ col 1))
                                  )
                              )
                            ))

(define EXECUTE (lambda (board count-row count-col continue)
                  ;(PRINT-BOARD board) (newline)
                  ;(print count-row) (print count-col) (print continue) (print (IS-FINISHED board 0 '())) (newline) (newline)
                  (if continue
                      (( lambda ()
                          (define new-all (LONELY-TREE-DETECTER board board '() 0 count-row count-col))
                          (define new-all2 (COMPLETE-ROW-COL-DETECTER (car new-all) (cadr new-all) (caddr new-all))) 
                          (define new-board (ZERO-DETECTER (car new-all2) (cadr new-all2) (caddr new-all2)))
                          (if (ERROR-CONTROL new-board (cadr new-all2) (caddr new-all2))
                              #f
                              (EXECUTE new-board (cadr new-all2) (caddr new-all2) (or (cadddr new-all) (cadddr new-all2)) )
                          )
                      ))
                      (( lambda ()
                          (define outputs (IS-FINISHED board 0 '()))
                          (if (car outputs)
                              board
                              (TRY-TENT PUT-TENT board count-row count-col (cadr outputs))
                          )
                      ))
                  ) 
                ))


(define TRY-TENT (lambda (function board count-row count-col coords)
                   (define output (function board count-row count-col (car coords)))
                   (if (equal? output #f)
                       (TRY-TENT function board count-row count-col (cdr coords))
                       output
                   )
                 ))

(define ERROR-CONTROL (lambda (board count-row count-col)
                          (if (CONTROL-LIST count-row)
                              (if (CONTROL-LIST count-col)
                                  #f
                                  #t
                              )
                              #t
                          )
                      ))
(define CONTROL-LIST (lambda (lst)
                       (if (null? lst)
                           #t
                           (if (< (car lst) 0)
                               #f
                               (CONTROL-LIST (cdr lst))
                           )
                       )
                     ))

(define PRINT-BOARD (lambda (board)
                      (if (null? board)
                          #t
                          ((lambda () (print (car board)) (newline) (PRINT-BOARD (cdr board)) ))
                      )
                    ))

(define PUT-TENT (lambda (board count-row count-col c)
                   (define b1 (TENT-CLEANER (CHANGE-BOARD board (car c) (cadr c) 3 0) c))
                   (define new-count-row (DECREASE-NTH-BYONE count-row  (car c)))
                   (define new-count-col (DECREASE-NTH-BYONE count-col  (cadr c)))
                   (define new-board (ZERO-DETECTER b1 new-count-row new-count-col))
                   (if (ERROR-CONTROL new-board new-count-row new-count-col)
                       #f
                       (EXECUTE new-board new-count-row new-count-col #t)
                   )
                 ))

(define IS-FINISHED (lambda (board index empties)
                     (if (null? board)
                         (if (null? empties)
                             (list #t)
                             (list #f empties)
                         )
                         (IS-FINISHED (cdr board) (+ index 1) (append (cadr (COUNT-EMPTY-ROW (car board) 0 '() index 0)) empties))
                     )
                   ))


; Helper functions
(define COMPLETE-ROW-COL-DETECTER (lambda (board count-row count-col)
                                    (define outputs (COMPLETE-LIST-DETECTER board board (cons 0 count-row) 0 #t '()))
                                    (define count1 (ROW-COL-DECREASER-NTIMES (car outputs) (list count-row count-col) (cadr outputs) #f))
                                    (define outputs2 (COMPLETE-LIST-DETECTER (car outputs) (car outputs) (cons 0 (cadr count1)) 0 #f '())) 
                                    (define count2 (ROW-COL-DECREASER-NTIMES (car outputs2) (list (car count1) (cadr count1)) (cadr outputs2) (caddr count1)))
                                    (list (car outputs2) (car count2) (cadr count2) (caddr count2)) 
                                  ))
(define ROW-COL-DECREASER-NTIMES (lambda (board counts coords success)
                            (if (null? coords)
                                (list (car counts) (cadr counts) success)
                                (ROW-COL-DECREASER-NTIMES
                                 board
                                 (ROW-COL-DECREASER board (car counts) (cadr counts) (car coords))
                                 (cdr coords)
                                 #t
                                )
                            )
                          ))
(define ROW-COL-DECREASER (lambda (board count-row count-col c)
                            (if (= (FIND-BOARD board (car c) (cadr c)) 3)
                                (list (DECREASE-NTH-BYONE count-row  (car c)) (DECREASE-NTH-BYONE count-col  (cadr c)))
                                (list count-row count-col)
                            )
                          ))

(define COMPLETE-LIST-DETECTER (lambda (all-board board lst index is-row coords)
                                (if (null? lst)
                                    (list all-board coords)
                                    ((lambda ()
                                       (define outputs (if is-row
                                           (COUNT-EMPTY-ROW (car board) 0 '() index 0)
                                           (COUNT-EMPTY-COL all-board (COL-LIST index (- (length all-board) 2) '() ) 0 '() 1 index)
                                       ))
                                       
                                       (define new-all (if (= (car outputs) (car lst))
                                           (list (TENT-CLEANER-NTIMES (CHANGE-BOARD-NTIMES all-board (cadr outputs) 3 0) (cadr outputs)) (append (cadr outputs) coords))
                                           (list all-board coords)
                                       ))
                                       
                                       (COMPLETE-LIST-DETECTER (car new-all) (cdr board) (cdr lst) (+ index 1) is-row (cadr new-all))
                                    ))
                                )
                              ))
(define COUNT-EMPTY-ROW (lambda (lst counter empties row col)
                          (if (null? lst)
                              (list counter empties)
                              (if (= (car lst) 0)
                                  (COUNT-EMPTY-ROW (cdr lst) (+ counter 1) (cons (list row col) empties) row (+ col 1))
                                  (COUNT-EMPTY-ROW (cdr lst) counter empties row (+ col 1))
                              )
                          )
                        ))
(define COUNT-EMPTY-COL (lambda (board lst counter empties row col)
                          (if (null? lst)
                              (list counter empties)
                              (if (= (FIND-BOARD board (car (car lst)) (cadr (car lst))) 0)
                                  (COUNT-EMPTY-COL board (cdr lst) (+ counter 1) (cons (list row col) empties) (+ row 1) col)
                                  (COUNT-EMPTY-COL board (cdr lst) counter empties (+ row 1) col)
                              )
                          )
                        ))

(define TENT-CLEANER-NTIMES (lambda (board lst)
                              (if (null? lst)
                                  board
                                  (TENT-CLEANER-NTIMES (TENT-CLEANER board (car lst)) (cdr lst)) 
                              )
                            ))
  
(define TENT-CLEANER (lambda (board c)
                       (if (= (FIND-BOARD board (car c) (cadr c)) 3)
                           (( lambda ()
                               (define b1 (CHANGE-BOARD board (+ (car c) 1) (cadr c) 1 0))
                               (define b2(CHANGE-BOARD b1 (- (car c) 1) (cadr c) 1 0))
                               (define b3 (CHANGE-BOARD b2 (car c) (+ (cadr c) 1) 1 0))
                               (define b4 (CHANGE-BOARD b3 (car c) (- (cadr c) 1) 1 0))
                               (define b5 (CHANGE-BOARD b4 (+ (car c) 1) (+ (cadr c) 1) 1 0))
                               (define b6 (CHANGE-BOARD b5 (+ (car c) 1) (- (cadr c) 1) 1 0))
                               (define b7 (CHANGE-BOARD b6 (- (car c) 1) (+ (cadr c) 1) 1 0))
                               (CHANGE-BOARD b7 (- (car c) 1) (- (cadr c) 1) 1 0)
                           ))
                           board
                       )
                     ))

(define LONELY-TREE-DETECTER (lambda (all-board board lonely-trees row count-row count-col)
                              (if (null? board)
                                  (LONELY-TREE-HANDLER all-board lonely-trees count-row count-col #f)
                                  (LONELY-TREE-DETECTER all-board (cdr board) (LONELY-TREE-DETECTER-INNER all-board (car board) lonely-trees 0 row) (+ row 1) count-row count-col)
                              )
                            ))
(define LONELY-TREE-DETECTER-INNER (lambda (all-board lst lonely-trees col row)
                              (if (null? lst)
                                  lonely-trees
                                  ((lambda ()
                                     (define ns (NEIGHBOR-LIST (list row col)))
                                     (define ns-value (if (= (car lst) 2)
                                                       (list
                                                        (FIND-BOARD all-board (car (car ns)) (cadr (car ns)))
                                                        (FIND-BOARD all-board (car (cadr ns)) (cadr (cadr ns)))
                                                        (FIND-BOARD all-board (car (caddr ns)) (cadr (caddr ns)))
                                                        (FIND-BOARD all-board (car (cadddr ns)) (cadr (cadddr ns)))
                                                       )
                                                       '()
                                                      ))
                                                       
                                     (if (and (= (car lst) 2) (= (+
                                                                  (TRUE-FALSE-CONVERTER (= (car ns-value) 0))
                                                                  (TRUE-FALSE-CONVERTER (= (cadr ns-value) 0))
                                                                  (TRUE-FALSE-CONVERTER (= (caddr ns-value) 0))
                                                                  (TRUE-FALSE-CONVERTER (= (cadddr ns-value) 0))
                                                                 ) 1
                                                              )
                                                              (= (+
                                                                  (TRUE-FALSE-CONVERTER (= (car ns-value) 3))
                                                                  (TRUE-FALSE-CONVERTER (= (cadr ns-value) 3))
                                                                  (TRUE-FALSE-CONVERTER (= (caddr ns-value) 3))
                                                                  (TRUE-FALSE-CONVERTER (= (cadddr ns-value) 3))
                                                                 ) 0
                                                               )
                                         )
                                         (LONELY-TREE-DETECTER-INNER all-board (cdr lst) (cons (list row col) lonely-trees) (+ col 1) row)
                                         (LONELY-TREE-DETECTER-INNER all-board (cdr lst) lonely-trees (+ col 1) row)
                                     )
                                  ))
                              )
                            ))

(define LONELY-TREE-HANDLER (lambda (board lonely-trees count-row count-col success)
                              (if (null? lonely-trees)
                                  (list board count-row count-col success)
                                  ((lambda ()
                                     (define ns (NEIGHBOR-LIST (car lonely-trees)))
                                     (define REC (lambda (lst)
                                                   (if (null? lst)
                                                       '(0 0)
                                                       (if (= (FIND-BOARD board (car (car lst)) (cadr (car lst))) 0)
                                                           (car lst)
                                                           (REC (cdr lst))
                                                       )
                                                   )
                                                 ))
                                     (define coord (REC ns))
                                     
                                     (define b1 (CHANGE-BOARD board (car coord) (cadr coord) 3 0))                                     
                                     (define b2 (TENT-CLEANER b1 coord))
                                     (define counts (ROW-COL-DECREASER b2 count-row count-col coord))
                                     
                                     (LONELY-TREE-HANDLER b2 (cdr lonely-trees) (car counts) (cadr counts) #t)
                                  ))
                              )
                            ))

(define ORTHOGONAL-DETECTER (lambda (all-board board row)
                              (if (null? board)
                                  '()
                                  (cons (ORTHOGONAL-DETECTER-INNER all-board (car board) 0 row)  (ORTHOGONAL-DETECTER all-board (cdr board) (+ row 1)))
                              )
                            ))
(define ORTHOGONAL-DETECTER-INNER (lambda (all-board lst col row)
                              (if (null? lst)
                                  '()
                                  ((lambda ()
                                     (define ns (NEIGHBOR-LIST (list row col)))
                                     
                                     (if (and (= (car lst) 0)  (not (or
                                                                (= (FIND-BOARD all-board (car (car ns)) (cadr (car ns))) 2)
                                                                (= (FIND-BOARD all-board (car (cadr ns)) (cadr (cadr ns))) 2)
                                                                (= (FIND-BOARD all-board (car (caddr ns)) (cadr (caddr ns))) 2)
                                                                (= (FIND-BOARD all-board (car (cadddr ns)) (cadr (cadddr ns))) 2)
                                                               ))
                                         )
                                         (cons 1 (ORTHOGONAL-DETECTER-INNER all-board (cdr lst) (+ col 1) row))
                                         (cons (car lst) (ORTHOGONAL-DETECTER-INNER all-board (cdr lst) (+ col 1) row))
                                     )
                                  ))
                              )
                            ))

(define TRUE-FALSE-CONVERTER (lambda (input)
                               (if input
                                   1
                                   0
                               )
                             ))

(define ZERO-DETECTER (lambda (board count-row count-col)
                        (define b1 (FILL-ZEROS board (FIND-ZEROS count-row '() 1) #t))
                        (FILL-ZEROS b1 (FIND-ZEROS count-col '() 1) #f)
                      ))
(define FIND-ZEROS (lambda (lst zeros index)
                     (if (null? lst)
                         zeros
                         (if (= (car lst) 0)
                             (FIND-ZEROS (cdr lst) (cons index zeros) (+ index 1))
                             (FIND-ZEROS (cdr lst) zeros (+ index 1))
                         )
                     )
                   ))
(define FILL-ZEROS (lambda (board zeros isRow)
                     (if (null? zeros)
                         board
                         (if isRow
                             (FILL-ZEROS (CHANGE-BOARD-NTIMES board (ROW-LIST (car zeros) (- (length board) 2) '()) 1 0) (cdr zeros) isRow)
                             (FILL-ZEROS (CHANGE-BOARD-NTIMES board (COL-LIST (car zeros) (- (length (car board)) 2) '()) 1 0) (cdr zeros) isRow)
                         )     
                     )
                   ))

(define CREATE-BOARD (lambda (size-row size-col is-first)
                       (if (= size-row 0)
                           '()
                           (if (or is-first (= size-row 1))
                               (cons (CREATE-BOARD-INNER size-col 1 #t) (CREATE-BOARD (- size-row 1) size-col #f))
                               (cons (CREATE-BOARD-INNER size-col 0 #t) (CREATE-BOARD (- size-row 1) size-col #f))
                           )
                       )
                     ))
(define CREATE-BOARD-INNER (lambda (size-col number is-first)
                              (if (= size-col 0)
                                  '()
                                  (if (or is-first (= size-col 1))
                                      (cons '1 (CREATE-BOARD-INNER (- size-col 1) number #f))
                                      (cons number (CREATE-BOARD-INNER (- size-col 1) number #f))
                                  )
                              )
                           ))

(define CHANGE-BOARD-NTIMES (lambda (board lst value old-value)
                              (if (null? lst)
                                  board
                                  (CHANGE-BOARD-NTIMES (CHANGE-BOARD board (car (car lst)) (cadr (car lst)) value old-value) (cdr lst) value old-value)
                              )
                            ))

(define CHANGE-BOARD (lambda (board row col value old-value)
                       (if (= row 0)
                           (cons (CHANGE-BOARD-INNER (car board) col value old-value) (cdr board))
                           (cons (car board) (CHANGE-BOARD (cdr board) (- row 1) col value old-value))
                           )
                     ))
(define CHANGE-BOARD-INNER (lambda (lst index value old-value)
                             (if (= index 0)
                                 (if (= (car lst) old-value)
                                     (cons value (cdr lst))
                                     lst
                                 )
                                 (cons (car lst) (CHANGE-BOARD-INNER (cdr lst) (- index 1) value old-value) )
                             )
                           ))

(define FIND-BOARD (lambda (board row col)
                     (if (= row 0)
                         (FIND-BOARD-INNER (car board) col)
                         (FIND-BOARD (cdr board) (- row 1) col)
                     )
                   ))
(define FIND-BOARD-INNER (lambda (lst index)
                           (if (= index 0)
                               (car lst)
                               (FIND-BOARD-INNER (cdr lst) (- index 1))
                           )
                         ))

(define REPLACE-NTH (lambda (lst index value)
                      (if (= index 1)
                          (cons value (cdr lst) )
                          (cons (car lst) (REPLACE-NTH (cdr lst) (- index 1) value) )
                      )
                    ))

(define DECREASE-NTH-BYONE (lambda (lst index)
                      (if (= index 1)
                          (cons (- (car lst) 1) (cdr lst) )
                          (cons (car lst) (DECREASE-NTH-BYONE (cdr lst) (- index 1)) )
                      )
                    ))

(define RETURN-FIRST-NOT-FALSE (lambda (function lst)
                                 (if (eq? (function (car lst)) #f)
                                     (RETURN-FIRST-NOT-FALSE function (cdr lst))
                                     (function (car lst))
                                 )
                               ))

(define ADJACENT (lambda (c1 c2)
                     (if (and (< (abs (- (car c1) (car c2))) 2) (< (abs (- (cadr c1) (cadr c2)) ) 2))
                         #t
                         #f
                     )
                  ))

(define ADJACENT-WITH-LIST (lambda (c list-c)
                             (if (null? list-c)
                                 #f
                                 (if (ADJACENT c (car list-c))
                                     #t
                                     (ADJACENT-WITH-LIST c (cdr list-c))
                                 )
                             )
                           ))

(define NEIGHBOR-LIST (lambda (c)
                        (list
                         (list (car c) (+ (cadr c ) 1))
                         (list (car c) (- (cadr c ) 1))
                         (list (+ (car c ) 1) (cadr c))
                         (list (- (car c ) 1) (cadr c))
                        )
                      ))
(define ROW-LIST (lambda (row-number size rows)
                   (if (= size 0)
                       rows
                       (ROW-LIST row-number (- size 1) (cons (list row-number size) rows))
                   )
                 ))

(define COL-LIST (lambda (col-number size cols)
                   (if (= size 0)
                       cols
                       (COL-LIST col-number (- size 1) (cons (list size col-number) cols))
                   )
                 ))